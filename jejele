#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
typedef struct station
{
    int id;                
    int consommation; 
    int production;
} Station;

typedef struct avl_struct
{
    Station station;             
    int eq;                
    struct avl_struct *fg; 
    struct avl_struct *fd; 
} AVL;

AVL* creerAVL(Station station){

    AVL* nouveau = malloc(sizeof(AVL));
    if (nouveau == NULL)
    {
        exit(EXIT_FAILURE); 
    }
    nouveau->station = station;
    nouveau->fg = NULL; 
    nouveau->fd = NULL;
    nouveau->eq = 0;   
    return nouveau;
}

Station* classement_station(AVL* a, Station station){
    if (a == NULL){
        a = creerAVL(station);
        return 0;
    }
}        



int est_nombre_valide(const char* str) {  // const char est une chaine qui ne peut pas etre modif
    // Vérifier si la chaîne est vide
    if (str == NULL || *str == '\0') {
        return 0;
    }

    // Vérifier chaque caractère de la chaîne
    for (int i = 0; str[i] != '\0'; i++) {
        if (!isdigit(str[i])) { // isdigit = commande pour savoir si  le caractere est un chiffre (entre 0 et 9)
            return 0;  // Si un caractère n'est pas un chiffre, la chaîne n'est pas un nombre valide
        }
    }

    return 1;  // La chaîne est un nombre valide
}

    

int main(int argc, char *argv[]) {
    // Vérification des arguments
    if (argc < 2) {
        return 1;
    }
    AVL* a = NULL;
    char id_str[100], production_str[100], consommation_str[100]; // chaine de caractere : tester si la fct contient des lettres
    // Ouverture du fichier
    FILE *file = fopen(argv[1], "r");
    if (file == NULL) {
        perror("Erreur lors de l'ouverture du fichier");
        return 1;
    }
    int line_count = 0; // Compteur de lignes
    int c;             // Variable pour stocker chaque caractère lu

    // Lecture caractère par caractère
    while ((c = fgetc(file)) != EOF) {
        if (c == '\n') {
            line_count++;
        }
    }
    

    // Lecture du fichier ligne par ligne
    while (fgets(line_count, sizeof(line_count), file) != NULL) {
        // Suppression du saut de ligne en fin de chaîne
        line[strcspn(line, "\n")] = '\0';
        Station s;
        int n = sscanf(file, "%s %s %s", &id_str, &production_str, &consommation_str);
        if( n != 3){
            return 1;
        }
        
        if (!est_nombre_valide(id_str) || !est_nombre_valide(production_str) || !est_nombre_valide(consommation_str)) {
            return 1;  // Si l'une des valeurs n'est pas un nombre valide
        }
        s.id = atoi(id_str);
        s.production = atoi(production_str);
        s.consommation = atoi(consommation_str);
        
        classement_station(a, s);
            
    }

    // Fermeture du fichier
    fclose(file);
